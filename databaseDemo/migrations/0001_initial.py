# Generated by Django 2.1.7 on 2019-12-19 07:31

import django.db.models.deletion
from django.db import migrations, models

import databaseDemo.models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CaptureInfo',
            fields=[
                ('poolingLB_id',
                 models.CharField(blank=True, db_column='捕获文库名', max_length=255, null=True, unique=True)),
                ('hybrid_date', models.DateField(blank=True, db_column='杂交日期', null=True)),
                ('probes', models.CharField(blank=True, db_column='杂交探针', max_length=255, null=True)),
                ('hybrid_min', models.FloatField(blank=True, db_column='杂交时间', null=True)),
                ('postpcr_cycles', models.IntegerField(blank=True, db_column='PostPCR循环数', null=True)),
                ('postpcr_con', models.FloatField(blank=True, db_column='PostPCR浓度', null=True)),
                ('elution_vol', models.FloatField(blank=True, db_column='洗脱体积', null=True)),
                ('operator', models.CharField(blank=True, db_column='操作人', max_length=255, null=True)),
                ('others', models.CharField(blank=True, db_column='备注', max_length=255, null=True)),
                ('index', models.AutoField(primary_key=True, serialize=False)),
                ('last_modify_date', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': '甲基化捕获文库信息表',
                'db_table': '甲基化捕获文库信息表',
                'ordering': ['index'],
            },
        ),
        migrations.CreateModel(
            name='ClinicalInfo',
            fields=[
                ('sample_id', models.CharField(blank=True, db_column='样本编号', max_length=255, null=True, unique=True)),
                ('name', models.CharField(blank=True, db_column='姓名', max_length=255, null=True)),
                ('gender', models.CharField(blank=True, db_column='性别', default=1, max_length=255, null=True)),
                ('age', models.IntegerField(blank=True, db_column='年龄', null=True)),
                ('patientId', models.CharField(blank=True, db_column='住院号', max_length=255, null=True)),
                ('category', models.TextField(blank=True, db_column='癌种', null=True)),
                ('stage', models.TextField(blank=True, db_column='分期', null=True)),
                ('diagnose', models.TextField(blank=True, db_column='诊断', null=True)),
                ('diagnose_others', models.TextField(blank=True, db_column='诊断备注', null=True)),
                ('centrifugation_date', models.DateField(blank=True, db_column='离心日期', null=True)),
                ('hospital', models.CharField(blank=True, db_column='医院编号', max_length=255, null=True)),
                ('department', models.CharField(blank=True, db_column='科室', max_length=255, null=True)),
                ('plasma_num', models.PositiveIntegerField(db_column='血浆管数', default=0)),
                ('adjacent_mucosa_num', models.PositiveIntegerField(db_column='癌旁组织', default=0)),
                ('cancer_tissue_num', models.PositiveIntegerField(db_column='癌组织', default=0)),
                ('WBC_num', models.PositiveIntegerField(db_column='白细胞', default=0)),
                ('stool_num', models.PositiveIntegerField(db_column='粪便', default=0)),
                ('send_date', models.DateField(blank=True, db_column='寄送日期', null=True)),
                ('others', models.CharField(blank=True, db_column='备注', max_length=255, null=True)),
                ('index', models.AutoField(primary_key=True, serialize=False)),
                ('last_modify_date', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': '临床信息表',
                'db_table': '临床信息表',
                'ordering': ['index'],
            },
        ),
        migrations.CreateModel(
            name='DNAInventoryInfo',
            fields=[
                ('totalM', models.FloatField(blank=True, db_column='DNA提取总量', null=True)),
                ('successM', models.FloatField(blank=True, db_column='成功建库使用量', null=True)),
                ('failM', models.FloatField(blank=True, db_column='失败建库使用量', null=True)),
                ('researchM', models.FloatField(blank=True, db_column='科研项目使用量', null=True)),
                ('othersM', models.FloatField(blank=True, db_column='其他使用量', null=True)),
                ('index', models.AutoField(primary_key=True, serialize=False)),
                ('last_modify_date', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': '样本DNA库存信息表',
                'db_table': '样本DNA库存信息表',
                'ordering': ['index'],
            },
        ),
        migrations.CreateModel(
            name='DNAUsageRecordInfo',
            fields=[
                ('LB_date', models.DateField(blank=True, db_column='使用日期', null=True)),
                ('mass', models.FloatField(blank=True, db_column='使用量', null=True)),
                ('usage', models.CharField(db_column='用途', max_length=255)),
                ('singleLB_id', models.CharField(blank=True, db_column='建库编号', max_length=255, null=True)),
                ('others', models.CharField(blank=True, db_column='备注', max_length=255, null=True)),
                ('index', models.AutoField(primary_key=True, serialize=False)),
                ('last_modify_date', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': '样本DNA使用记录表',
                'db_table': '样本DNA使用记录表',
                'ordering': ['index'],
            },
        ),
        migrations.CreateModel(
            name='ExtractInfo',
            fields=[
                ('dna_id', models.CharField(db_column='DNA提取编号', max_length=255, unique=True)),
                ('extract_date', models.DateField(blank=True, db_column='提取日期', null=True)),
                ('sample_type', models.CharField(db_column='样本类型', max_length=255)),
                ('sample_volume', models.FloatField(blank=True, db_column='样本体积', null=True)),
                ('extract_method', models.CharField(blank=True, db_column='提取方法', max_length=255, null=True)),
                ('dna_con', models.FloatField(blank=True, db_column='浓度', null=True)),
                ('dna_vol', models.FloatField(blank=True, db_column='体积', null=True)),
                ('others', models.CharField(blank=True, db_column='备注', max_length=255, null=True)),
                ('index', models.AutoField(primary_key=True, serialize=False)),
                ('last_modify_date', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('sample_id',
                 models.ForeignKey(blank=True, db_column='样本编号', null=True, on_delete=django.db.models.deletion.CASCADE,
                                   related_name='ExtractInfo_ClinicalInfo', to='databaseDemo.ClinicalInfo',
                                   to_field='sample_id')),
            ],
            options={
                'verbose_name': '样本提取表',
                'db_table': '样本提取表',
                'ordering': ['index'],
            },
        ),
        migrations.CreateModel(
            name='LibraryInfo',
            fields=[
                ('singleLB_id', models.CharField(blank=True, db_column='建库编号', max_length=255, null=True, unique=True)),
                ('tube_id', models.CharField(blank=True, db_column='管上编号', max_length=255, null=True)),
                ('clinical_boolen',
                 models.CharField(blank=True, db_column='是否临床', default=1, max_length=255, null=True)),
                ('singleLB_name', models.CharField(blank=True, db_column='文库名', max_length=255, null=True)),
                ('label', models.CharField(blank=True, db_column='样本标签', max_length=255, null=True)),
                ('barcodes', models.CharField(blank=True, db_column='index列表', max_length=255, null=True)),
                ('LB_date', models.DateField(blank=True, db_column='建库日期', null=True)),
                ('LB_method', models.CharField(blank=True, db_column='建库方法', max_length=255, null=True)),
                ('kit_batch', models.CharField(blank=True, db_column='试剂批次', max_length=255, null=True)),
                ('con', models.FloatField(blank=True, db_column='样本浓度', null=True)),
                ('mass', models.FloatField(blank=True, db_column='起始量', null=True)),
                ('pcr_cycles', models.IntegerField(blank=True, db_column='PCR循环数', null=True)),
                ('LB_con', models.FloatField(blank=True, db_column='文库浓度', null=True)),
                ('LB_vol', models.FloatField(blank=True, db_column='文库体积', null=True)),
                ('operator', models.CharField(blank=True, db_column='操作人', max_length=255, null=True)),
                ('others', models.CharField(blank=True, db_column='备注', max_length=255, null=True)),
                ('index', models.AutoField(primary_key=True, serialize=False)),
                ('last_modify_date', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('dna_id', models.ForeignKey(blank=True, db_column='DNA提取编号', null=True,
                                             on_delete=django.db.models.deletion.CASCADE,
                                             related_name='LibraryInfo_ExtractInfo', to='databaseDemo.ExtractInfo',
                                             to_field='dna_id')),
                ('sample_id',
                 models.ForeignKey(blank=True, db_column='样本编号', null=True, on_delete=django.db.models.deletion.CASCADE,
                                   related_name='LibraryInfo_ClinicalInfo', to='databaseDemo.ClinicalInfo',
                                   to_field='sample_id')),
            ],
            options={
                'verbose_name': '甲基化建库表',
                'db_table': '甲基化建库表',
                'ordering': ['index'],
            },
        ),
        migrations.CreateModel(
            name='PoolingInfo',
            fields=[
                ('mass', models.FloatField(blank=True, db_column='取样', null=True)),
                ('volume', models.FloatField(blank=True, db_column='体积', null=True)),
                ('singleLB_Pooling_id',
                 models.CharField(blank=True, db_column='测序文库编号', max_length=255, null=True, unique=True)),
                ('others', models.CharField(blank=True, db_column='备注', max_length=255, null=True)),
                ('index', models.AutoField(primary_key=True, serialize=False)),
                ('last_modify_date', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('dna_id', models.ForeignKey(blank=True, db_column='DNA提取编号', null=True,
                                             on_delete=django.db.models.deletion.CASCADE,
                                             related_name='PoolingInfo_ExtractInfo', to='databaseDemo.ExtractInfo',
                                             to_field='dna_id')),
                ('poolingLB_id', models.ForeignKey(blank=True, db_column='捕获文库名', null=True,
                                                   on_delete=django.db.models.deletion.CASCADE,
                                                   related_name='PoolingInfo_CaptureInfo',
                                                   to='databaseDemo.CaptureInfo', to_field='poolingLB_id')),
                ('sample_id',
                 models.ForeignKey(blank=True, db_column='样本编号', null=True, on_delete=django.db.models.deletion.CASCADE,
                                   related_name='PoolingInfo_ClinicalInfo', to='databaseDemo.ClinicalInfo',
                                   to_field='sample_id')),
                ('singleLB_id',
                 models.ForeignKey(blank=True, db_column='建库编号', null=True, on_delete=django.db.models.deletion.CASCADE,
                                   related_name='PoolingInfo_LibraryInfo', to='databaseDemo.LibraryInfo',
                                   to_field='singleLB_id')),
            ],
            options={
                'verbose_name': 'pooling表',
                'db_table': 'pooling表',
                'ordering': ['index'],
            },
        ),
        migrations.CreateModel(
            name='QCInfo',
            fields=[
                ('QC_id', models.CharField(blank=True, db_column='Sample', max_length=255, null=True, unique=True)),
                ('data_size_gb_field', models.FloatField(blank=True, db_column='Data_Size-Gb', null=True)),
                ('clean_rate_field', models.FloatField(blank=True, db_column='Clean_Rate', null=True)),
                ('r1_q20', models.FloatField(blank=True, db_column='R1_Q20', null=True)),
                ('r2_q20', models.FloatField(blank=True, db_column='R2_Q20', null=True)),
                ('r1_q30', models.FloatField(blank=True, db_column='R1_Q30', null=True)),
                ('r2_q30', models.FloatField(blank=True, db_column='R2_Q30', null=True)),
                ('gc_content', models.FloatField(blank=True, db_column='GC_Content', null=True)),
                ('bs_conversion_rate_lambda_dna_field',
                 models.FloatField(blank=True, db_column='BS_conversion_rate-lambda_DNA', null=True)),
                ('bs_conversion_rate_chh_field',
                 models.FloatField(blank=True, db_column='BS_conversion_rate-CHH', null=True)),
                ('bs_conversion_rate_chg_field',
                 models.FloatField(blank=True, db_column='BS_conversion_rate-CHG', null=True)),
                ('uniquely_paired_mapping_rate',
                 models.FloatField(blank=True, db_column='Uniquely_Paired_Mapping_Rate', null=True)),
                ('mismatch_and_indel_rate',
                 models.FloatField(blank=True, db_column='Mismatch_and_InDel_Rate', null=True)),
                ('mode_fragment_length_bp_field',
                 models.FloatField(blank=True, db_column='Mode_Fragment_Length-bp', null=True)),
                ('genome_duplication_rate',
                 models.FloatField(blank=True, db_column='Genome_Duplication_Rate', null=True)),
                ('genome_depth_x_field', models.FloatField(blank=True, db_column='Genome_Depth', null=True)),
                ('genome_dedupped_depth_x_field',
                 models.FloatField(blank=True, db_column='Genome_Dedupped_Depth', null=True)),
                ('genome_coverage', models.FloatField(blank=True, db_column='Genome_Coverage', null=True)),
                ('genome_4x_cpg_depth_x_field',
                 models.FloatField(blank=True, db_column='Genome_4X_CpG_Depth', null=True)),
                (
                'genome_4x_cpg_coverage', models.FloatField(blank=True, db_column='Genome_4X_CpG_Coverage', null=True)),
                ('genome_4x_cpg_methylation_level',
                 models.FloatField(blank=True, db_column='Genome_4X_CpG_methylation_level', null=True)),
                (
                'panel_4x_cpg_depth_x_field', models.FloatField(blank=True, db_column='Panel_4X_CpG_Depth', null=True)),
                ('panel_4x_cpg_coverage', models.FloatField(blank=True, db_column='Panel_4X_CpG_Coverage', null=True)),
                ('panel_4x_cpg_methylation_level',
                 models.FloatField(blank=True, db_column='Panel_4X_CpG_methylation_level', null=True)),
                ('panel_ontarget_rate_region_field',
                 models.FloatField(blank=True, db_column='Panel_Ontarget_Rate-region', null=True)),
                ('panel_duplication_rate_region_field',
                 models.FloatField(blank=True, db_column='Panel_Duplication_Rate-region', null=True)),
                ('panel_depth_site_x_field', models.FloatField(blank=True, db_column='Panel_Depth-site_X', null=True)),
                ('panel_dedupped_depth_site_x_field',
                 models.FloatField(blank=True, db_column='Panel_Dedupped_Depth-site_X', null=True)),
                ('panel_coverage_site_1x_field',
                 models.FloatField(blank=True, db_column='Panel_Coverage-site_1X', null=True)),
                ('panel_coverage_site_10x_field',
                 models.FloatField(blank=True, db_column='Panel_Coverage-site_10X', null=True)),
                ('panel_coverage_site_20x_field',
                 models.FloatField(blank=True, db_column='Panel_Coverage-site_20X', null=True)),
                ('panel_coverage_site_50x_field',
                 models.FloatField(blank=True, db_column='Panel_Coverage-site_50X', null=True)),
                ('panel_coverage_site_100x_field',
                 models.FloatField(blank=True, db_column='Panel_Coverage-site_100X', null=True)),
                ('panel_uniformity_site_20_mean_field',
                 models.FloatField(blank=True, db_column='Panel_Uniformity-site_gt0.2mean', null=True)),
                ('strand_balance_f_field', models.FloatField(blank=True, db_column='Strand_balance-F', null=True)),
                ('strand_balance_r_field', models.FloatField(blank=True, db_column='Strand_balance-R', null=True)),
                ('gc_bin_depth_ratio', models.FloatField(blank=True, db_column='GC_bin_depth_ratio', null=True)),
                ('others', models.CharField(blank=True, db_column='备注', max_length=255, null=True)),
                ('index', models.AutoField(primary_key=True, serialize=False)),
                ('last_modify_date', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('dna_id', models.ForeignKey(blank=True, db_column='DNA提取编号', null=True,
                                             on_delete=django.db.models.deletion.CASCADE,
                                             related_name='QCInfo_ExtractInfo', to='databaseDemo.ExtractInfo',
                                             to_field='dna_id')),
                ('poolingLB_id', models.ForeignKey(blank=True, db_column='捕获文库名', null=True,
                                                   on_delete=django.db.models.deletion.CASCADE,
                                                   related_name='QCInfo_CaptureInfo', to='databaseDemo.CaptureInfo',
                                                   to_field='poolingLB_id')),
                ('sample_id',
                 models.ForeignKey(blank=True, db_column='样本编号', null=True, on_delete=django.db.models.deletion.CASCADE,
                                   related_name='QCInfo_ClinicalInfo', to='databaseDemo.ClinicalInfo',
                                   to_field='sample_id')),
            ],
            options={
                'verbose_name': '样本测序质控表',
                'db_table': '样本测序质控表',
                'ordering': ['index'],
            },
        ),
        migrations.CreateModel(
            name='SequencingInfo',
            fields=[
                ('sequencing_id',
                 models.CharField(blank=True, db_column='上机文库号', max_length=255, null=True, unique=True)),
                ('send_date', models.DateField(blank=True, db_column='送测日期', null=True)),
                ('start_time', models.DateTimeField(blank=True, db_column='上机时间', null=True)),
                ('end_time', models.DateTimeField(blank=True, db_column='下机时间', null=True)),
                ('machine_id', models.CharField(blank=True, db_column='机器号', max_length=255, null=True)),
                ('chip_id', models.CharField(blank=True, db_column='芯片号', max_length=255, null=True)),
                ('others', models.CharField(blank=True, db_column='备注', max_length=255, null=True)),
                ('index', models.AutoField(primary_key=True, serialize=False)),
                ('last_modify_date', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('poolingLB_id',
                 models.ManyToManyField(blank=True, db_column='捕获文库名', related_name='SequencingInfo_CaptureInfo',
                                        to='databaseDemo.CaptureInfo')),
            ],
            options={
                'verbose_name': '测序登记表',
                'db_table': '测序登记表',
                'ordering': ['index'],
            },
        ),
        migrations.CreateModel(
            name='UploadFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uploadFile',
                 models.FileField(db_column='上传文件', null=True, upload_to=databaseDemo.models.user_directory_path)),
                ('uploadUrl', models.CharField(db_column='项目', max_length=255)),
                ('uploadOperator', models.CharField(blank=True, db_column='上传者', max_length=255, null=True)),
            ],
            options={
                'verbose_name': '上传文件信息表',
                'db_table': '上传文件信息表',
            },
        ),
        migrations.AddField(
            model_name='qcinfo',
            name='sequencing_id',
            field=models.ForeignKey(blank=True, db_column='上机文库号', null=True,
                                    on_delete=django.db.models.deletion.CASCADE, related_name='QCInfo_SequencingInfo',
                                    to='databaseDemo.SequencingInfo', to_field='sequencing_id'),
        ),
        migrations.AddField(
            model_name='qcinfo',
            name='singleLB_Pooling_id',
            field=models.ForeignKey(blank=True, db_column='测序文库名', null=True,
                                    on_delete=django.db.models.deletion.CASCADE, related_name='QCInfo_PoolingInfo',
                                    to='databaseDemo.PoolingInfo', to_field='singleLB_Pooling_id'),
        ),
        migrations.AddField(
            model_name='qcinfo',
            name='singleLB_id',
            field=models.ForeignKey(blank=True, db_column='建库编号', null=True,
                                    on_delete=django.db.models.deletion.CASCADE, related_name='QCInfo_LibraryInfo',
                                    to='databaseDemo.LibraryInfo', to_field='singleLB_id'),
        ),
        migrations.AddField(
            model_name='dnausagerecordinfo',
            name='dna_id',
            field=models.ForeignKey(blank=True, db_column='DNA提取编号', null=True,
                                    on_delete=django.db.models.deletion.CASCADE,
                                    related_name='DNAUsageRecordInfo_ExtractInfo', to='databaseDemo.ExtractInfo',
                                    to_field='dna_id'),
        ),
        migrations.AddField(
            model_name='dnausagerecordinfo',
            name='sample_id',
            field=models.ForeignKey(blank=True, db_column='样本编号', null=True,
                                    on_delete=django.db.models.deletion.CASCADE,
                                    related_name='DNAUsageRecordInfo_ClinicalInfo', to='databaseDemo.ClinicalInfo',
                                    to_field='sample_id'),
        ),
        migrations.AddField(
            model_name='dnainventoryinfo',
            name='dna_id',
            field=models.ForeignKey(blank=True, db_column='DNA提取编号', null=True,
                                    on_delete=django.db.models.deletion.CASCADE,
                                    related_name='DNAInventoryInfo_ExtractInfo', to='databaseDemo.ExtractInfo',
                                    to_field='dna_id'),
        ),
        migrations.AddField(
            model_name='dnainventoryinfo',
            name='sample_id',
            field=models.ForeignKey(blank=True, db_column='样本编号', null=True,
                                    on_delete=django.db.models.deletion.CASCADE,
                                    related_name='DNAInventoryInfo_ClinicalInfo', to='databaseDemo.ClinicalInfo',
                                    to_field='sample_id'),
        ),
    ]
