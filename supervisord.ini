[program:databaseDemo_celery]
directory = /home/wsl/mnt/f/wsl/project/databaseDemo               ; 执行前要不要先cd到目录$
command = /bin/bash -c '/home/wsl/anaconda3/envs/django/bin/python manage.py celery worker --loglevel=info'  ; 被监控的进程路径
autostart = true                ; 随着supervisord的启动而启动
autorestart = true              ; 自动重启。。当然要选上了
startretries = 10               ; 启动失败时的最多重试次数
exitcodes = 0                   ; 正常退出代码
stopsignal = KILL               ; 用来杀死进程的信号
stopwaitsecs = 10               ; 发送SIGKILL前的等待时间
redirect_stderr = true          ; 重定向stderr到stdout
stdout_logfile = /home/wsl/mnt/f/wsl/project/databaseDemo/celery.supervisor.logfile.log        ; 指定日志文件
; 默认为 false，如果设置为 true，当进程收到 stop 信号时，会自动将该信号发给该进$
stopasgroup = true             ; send stop signal to the UNIX process
; 默认为 false，如果设置为 true，当进程收到 kill 信号时，会自动将该信号发给该进$
killasgroup = true             ; SIGKILL the UNIX process group (def false)

[program:databaseDemo_gunicorn]
directory = /home/wsl/mnt/f/wsl/project/databaseDemo               ; 执行前要不要先cd到目录$
command = /bin/bash -c '/home/wsl/anaconda3/envs/django/bin/gunicorn databaseDemo.wsgi:application -c /home/wsl/mnt/f/wsl/project/databaseDemo/gunicorn.conf.py'  ; 被监控的进程路径
autostart = true                ; 随着supervisord的启动而启动
autorestart = true              ; 自动重启。。当然要选上了
startretries = 10               ; 启动失败时的最多重试次数
exitcodes = 0                   ; 正常退出代码
stopsignal = KILL               ; 用来杀死进程的信号
stopwaitsecs = 10               ; 发送SIGKILL前的等待时间
redirect_stderr = true          ; 重定向stderr到stdout
stdout_logfile = /home/wsl/mnt/f/wsl/project/databaseDemo/gunicorn.supervisor.logfile.log        ; 指定日志文件
; 默认为 false，如果设置为 true，当进程收到 stop 信号时，会自动将该信号发给该进$
stopasgroup = true             ; send stop signal to the UNIX process
; 默认为 false，如果设置为 true，当进程收到 kill 信号时，会自动将该信号发给该进$
killasgroup = true             ; SIGKILL the UNIX process group (def false)

